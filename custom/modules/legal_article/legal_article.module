<?php

/**
* @file
* Contains legal_article.module.
*/

use Drupal\Core\Entity;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;


/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function legal_article_node_presave($entity) {
  // Only apply to legal articles.
  if ($entity->bundle() == 'legal_article') {
    // Auto-generate title from full title.
    $full = $entity->field_full_title->getValue()[0]['value'];
    // Truncate to word if longer than 255 characters.
    if (strlen($full) > 255) {
      $full = preg_replace('/\s+?(\S+)?$/', '', substr($full, 0, 256));
    }
    // Only override title if full title exists.
    if ($full) {
      $entity->title = $full;
    }
    // Process parent location.
    if (!empty($entity->field_location->getValue()[0]['target_id'])) {
      // Get location term ID.
      $lid = $entity->field_location->getValue()[0]['target_id'];
      // Load term if there is one.
      $lterm = !empty($lid) ? Term::load($lid) : NULL;
      // If location term found...
      if (!empty($lterm)) {
        // If location has a parent...
        if (!empty($lterm->parent->getValue()[0]['target_id'])) {
          // Get parent location term ID and populate field.
          $lpid = $lterm->parent->getValue()[0]['target_id'];
          $entity->field_parent_location = $lpid;
        }
        // Otherwise use own location term id as parent.
        else {
          $entity->field_parent_location = $lid;
        }
      }
    }

    // Override coordinates with saved if present.
    $latitude = !empty($entity->field_saved_coordinates->entity) ? 
      $entity->field_saved_coordinates->entity->field_latitude->getValue()[0]['value'] : NULL;
    $longitude = !empty($entity->field_saved_coordinates->entity) ?   
      $entity->field_saved_coordinates->entity->field_longitude->getValue()[0]['value'] : NULL;
 
    if ($latitude and $longitude) {
      $entity->field_location_coordinates = [
        'value' => "POINT ($longitude $latitude)",
        'geo_type' => 'Point',
        'lon' => $longitude,
        'lat' => $latitude,
      ];
    }

    // Purge all extra fields if timeline event.
    if (!empty($entity->field_timeline_event->getValue()[0]['value']) and
      $entity->field_timeline_event->getValue()[0]['value'] == 1) {
        $entity->field_citation =
          $entity->field_location =
          $entity->field_location_address =
          $entity->field_location_coordinates =
          $entity->field_notes =
          $entity->field_source =
          $entity->field_images_pdf =
          NULL;
    }
  }
}

/**
 * Implements hook_theme().
 */
function legal_article_theme($existing, $type, $theme, $path) {
  // Use custom template to display annotations field.
  $theme = [];

  $theme['field__field_annotations'] = [
    'render element' => 'content',
    'base hook' => 'field',
    'template' => 'field--node--field-annotations--legal-article',
    'path' => drupal_get_path('module', 'legal_article') . '/templates',
  ];

  $theme['field__field_editorial_annotations'] = [
    'render element' => 'content',
    'base hook' => 'field',
    'template' => 'field--node--field-editorial-annotations--legal-article',
    'path' => drupal_get_path('module', 'legal_article') . '/templates',
  ];

  return $theme;
}

/**
 * Implements hook_form_alter().
 */
function legal_article_form_alter(&$form, $form_state, $form_id) {
  // Hide revision switch and URL alias fields for legal article create/edit forms.
  if ($form_id == 'node_legal_article_form' or
    $form_id == 'node_legal_article_edit_form') {
    // For theme Seven (from Stable).
    $form['field_revision_switch']['#attributes']['class'][] = 'hidden';
    $form['path']['#attributes']['class'][] = 'hidden';
    // For Bootstrap themes.
    $form['field_revision_switch']['#attributes']['class'][] = 'd-none';
    $form['path']['#attributes']['class'][] = 'd-none';

    // Display only relevant fields if entering a timeline event.
    $show_field = [
      'visible' => [
        ':input[name*="field_timeline_event"]' => ['checked' => FALSE],
      ],
    ];

    $form['field_citation']['#states'] =
      // $form['field_category']['#states'] =
      // $form['field_crimes']['#states'] =
      // $form['field_full_title']['#states'] =
      $form['field_pages']['#states'] =
      $form['field_location']['#states'] =
      $form['field_location_address']['#states'] =
      $form['field_location_coordinates']['#states'] =
      $form['field_notes']['#states'] =
      $form['field_source']['#states'] =
      // $form['field_punishments']['#states'] =
      $show_field;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function legal_article_form_node_legal_article_edit_form_alter(&$form, $form_state, $form_id) {
  // Add submit handler to the top of the stack.
  array_unshift($form['actions']['submit']['#submit'], 'article_preprocess');;
}

function article_preprocess(&$form, $form_state) {
  // Flip field_revision_switch to force new revision on submit.
  $switch = $form_state->getValue('field_revision_switch')['value'];
  $form_state->setValue('field_revision_switch', ['value' => (int)!$switch]);
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function legal_article_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'full' and $entity->getType() == 'legal_article') {
    // Full title to title.
    $build['title'][0]['#context']['value'] = $entity->field_full_title->getString();
    // PDF attachment filename override.
    $alias = explode('/', $entity->path->getValue()[0]['alias'])[2];
    $pdf_entity = $entity->field_images_pdf->entity;
    $pdf = $pdf_entity ? explode('.', $entity->field_images_pdf->entity->getFilename())[0] : NULL;
    // Update pdf file if not a match.
    if ($pdf and $pdf != $alias) {
      $fid = $pdf_entity->id();
      $file = File::load($fid);
      // Gets contents from file.
      $file_real_path = \Drupal::service('file_system')->realpath($file->getFileUri());
      $file_contents = file_get_contents($file_real_path);
      $new_file = \Drupal::service('file.repository')->writeData($file_contents, "public://pdf/$alias.pdf", FileSystemInterface::EXISTS_REPLACE);
      $entity->set('field_images_pdf', $new_file);
      $entity->save();
      $file->delete();
    } 
  }
}